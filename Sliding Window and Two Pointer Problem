// roblem Statement: Given a String, find the length of longest substring without any repeating character


#include <iostream>
#include <unordered_set>
using namespace std;

int lengthOfLongestSubstring(string s) {
    unordered_set<char> charSet;
    
    int left = 0;  // Left pointer of the sliding window
    int maxLength = 0;  // Variable to store the length of the longest substring
    
    for (int right = 0; right < s.length(); ++right) {
        while (charSet.find(s[right]) != charSet.end()) {
            charSet.erase(s[left]);
            left++;
        }
        
        charSet.insert(s[right]);
        maxLength = max(maxLength, right - left + 1);
    }
    
    return maxLength;
}

int main() {
    string s1 = "abcabcbb";
    string s2 = "bbbbb";
    string s3 = "pwwkew";
    
    cout << "Length of longest substring without repeating characters (abcabcbb): " 
         << lengthOfLongestSubstring(s1) << endl;
    cout << "Length of longest substring without repeating characters (bbbbb): " 
         << lengthOfLongestSubstring(s2) << endl;
    cout << "Length of longest substring without repeating characters (pwwkew): " 
         << lengthOfLongestSubstring(s3) << endl;
    
    return 0;
}
