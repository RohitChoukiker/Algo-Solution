algolution 

#include<bits/stdc++.h>
#include<unordered_map>

using namespace std;
// int countNegativeNO(vector<int> arr) {
//     int count = 0;
//     for (int num : arr) {
//         if (num < 0) {
//             count++;
//         }
//     }
//     return count;
// }

// int main() {
//     vector<int> arr = {-1, -15, -3, 3 -5};
//     int result = countNegativeNO(arr);
//     cout<<result;
//     return 0;
// }




// int main() {
//     vector<int> arr(5);

   
//     for (int i = 0; i < 5; i++) {
//         cin >> arr[i];
//     }

//     int max = arr[0];
//     for (int i = 1; i < 5; i++) {
//         if (arr[i] > max) {
//             max = arr[i];
//         }
//     }

//     cout << max << endl;

//     return 0;
// }




// vector<int> mergeSortedArrays(vector<int> arr1, vector<int> arr2) {
//     int i = 0, j = 0, k = 0;
//     int n1 = arr1.size(), n2 = arr2.size();
//     vector<int> merged(n1 + n2);

//     while (i < n1 && j < n2) {
//         if (arr1[i] < arr2[j]) {
//             merged[k++] = arr1[i++];
//         } else {
//             merged[k++] = arr2[j++];
//         }
//     }

//     while (i < n1) {
//         merged[k++] = arr1[i++];
//     }

//     while (j < n2) {
//         merged[k++] = arr2[j++];
//     }

//     return merged;
// }

// int main() {
//     vector<int> arr1 = {1, 3, 5, 7};
//     vector<int> arr2 = {2, 4, 6, 8};

//     vector<int> res = mergeSortedArrays(arr1, arr2);

// 
//     for (int i : res) {
//         cout <<i << " ";
//     }
//     cout << endl;

//     return 0;
// }


// int main() {
//     int n;

//     cout << "Enter the number of rows: ";
//     cin >> n;

//     for (int i = 1; i <= n; i++) {
//         for (int j = 1; j <= n - i; j++) {
//             cout << "  ";
//         }
//         for (int j = 1; j <= n; j++) {
//             cout << "* ";
//         }
//         cout << endl;
//     }

//     return 0;  

// }



// int main() {
//     int n;

//     cout << "Enter the number of rows: ";
//     cin >> n;

//     for (int i = 1; i <= n; i++) {
//         for (int j = 1; j <= i; j++) {
//             cout << "* ";
//         }
//         cout << endl;
//     }

//     return  
//  0;
// }




// int main() {
//     int n;

//     cout << "Enter the number of rows: ";
//     cin >> n;

//     for (int i = 1; i <= n; i++) {
//         for (int j = 1; j <= n - i; j++) {
//             cout << " ";
//         }
//         for (int j = 1; j <= 2 * i - 1; j++) {
//             cout << "*";
//         }
//         cout << endl;
//     }

//     for (int i = n - 1; i >= 1; i--) {
//         for (int j = 1; j <= n - i; j++) {
//             cout << " ";
//         }
//         for (int j = 1; j <= 2 * i - 1; j++) {
//             cout << "*";
//         }
//         cout << endl;
//     }

//     return 0;
// }



// print(int r,int c){
//     for(int i=1;i<r;i++){
//         if(i%2!=0){
//             for(int j=1;j<=c;j++){
//                 printf("%d",j);
//             }
//         }
//         else{
//             for(int j=c;j>=1;j--){
//                 printf("%d",j);
//             }
//         }
//         printf("\n");
//     }
// }

// int main(){
//     int r= 5,c=5;
//     print(r,c);
//     return 0;
// }





// print(int r,int c){
//    for(int i=1;i<=r;i++){
//     for(int j=1;j<=c;j++){
//         if(i ==1 || i ==r || j==1||j==c){
//             printf("1");
//         }
//         else{
//             printf("0");
//         }
//     }
//     printf("\n");
//    }
// }

// int main(){
//     int r= 5,c=5;
//     print(r,c);
//     return 0;
// }




// print(int r,int c){

//   for(int i=1;i<=r;i++){
//     if(i%2!=0){
//         for(int j=1;j<=c;j++){
//             cout<<j;
//         }
//     }
//     else{
//         for(int j=1;j<=c;j++){
//             cout<<j;
//         }
//     }
//     cout<<endl;
//   }   

// }

// int main(){
//     int r= 5,c=5;
//     print(r,c);
//     return 0;
// }

// start non patten questions

// int main(){

//  int arr[10];
//  int count = 0;

//   for(int i=0;i<10;i++){
//     cin>>arr[i];
//   }

//   unordered_map<int,int> feq;

//   for(int i=0;i<10;i++){
//     feq[arr[i]]++;
//   }

//   for(auto &num : feq){
//     if(num.second >1){
//         count++;
//     }
//   }

//   cout<<"count"<<count;



//     return 0;
// }



#include<iostream>
#include<vector>
#include<map>
using namespace std;

 int majorityElement(vector<int> &arr){

map<int,int> freq;
  	 int n = freq.size();
  	for(int nums : arr){
	  
  		freq[nums]++;
	  }
  	
  	
for(auto q :freq){
	if(q.first>n/2){
		return q.second;
	}
}
  	
  	return -1;
  }


int main(){
	
	vector<int> arr = {3,3,4,2,4,4,2,4,4};
	
 int result = 	majorityElement(arr);
  cout<<result;
	
	
	return 0;
}




#include<iostream>
#include<vector>
#include<map>
using namespace std;

 int majorityElement(vector<int> &arr){

map<int,int> freq;
  	 int n = arr.size();
  	for(int nums : arr){
	  
  		freq[nums]++;
	  }
  	
  	
for(auto q :freq){
	if(q.first>n/2){
		return q.second;
	}
}
  	
  	return -1;
  }


int main(){
	
	vector<int> arr = {3,3,4,2,4,4,4,2,4,4,4,4};
	
 int result = 	majorityElement(arr);
  cout<<result;
	
	
	return 0;
}


 ========================================================================================================
                                         SET 2

#include <iostream>
#include <vector>
using namespace std;


int maxSum(vector<int>& arr, int k) {
    int n = arr.size();


    if (n < k) {
        cout << " k is larger than the size of the array." << endl;
        return -1;
    }

  
    int max_sum = 0;
    for (int i = 0; i < k; i++) {
        max_sum += arr[i];
    }


    int window_sum = max_sum;
    for (int i = k; i < n; i++) {
        window_sum += arr[i] - arr[i - k];  
        max_sum = max(max_sum, window_sum); 
    }

    return max_sum;
}

int main() {
    vector<int> arr = {1, 8, 30, -5, 20, 7}; // Example array
    int k = 3;  // Number of consecutive elements

    int result = maxSum(arr, k);
    if (result != -1) {
        cout << "Maximum sum of " << result << endl;
    }

    return 0;
}





#include <iostream>
#include <vector>
using namespace std;


int largestSubarray(vector<int>& arr) {
    int n = arr.size();
    int max_sum = INT_MIN;  // Initialize to the smallest possible integer


    for (int i = 0; i < n; i++) {
        int current_sum = 0;

      
        for (int j = i; j < n; j++) {
            current_sum += arr[j]; // Add the element to the current sum
            max_sum = max(max_sum, current_sum); // Update max_sum if necessary
        }
    }

    return max_sum;
}

int main() {
    vector<int> arr = {-2, 1, -3, 4, -1, 2, 1, -5, 4}; // Example array
    int result = largestSubarray(arr);

    cout << "The largest sum of a subarray is: " << result << endl;

    return 0;
}




#include <iostream>
#include <vector>
using namespace std;


int find(vector<int>& arr) {
    int n = arr.size();


    for (int i = 0; i < n; i++) {
        int left_sum = 0, right_sum = 0;


        for (int j = 0; j < i; j++) {
            left_sum += arr[j];
        }


        for (int j = i + 1; j < n; j++) {
            right_sum += arr[j];
        }


        if (left_sum == right_sum) {
            return i; // Return the equilibrium index
        }
    }

    return -1; // Return -1 if no equilibrium index is found
}

int main() {
    vector<int> arr = {-7, 1, 5, 2, -4, 3, 0}; // Example array
    int result = find(arr);

    if (result != -1) {
        cout << "Equilibrium index: " << result << endl;
    } else {
        cout << "No equilibrium " << endl;
    }

    return 0;
}


======================================================================================================================================================================================================================

//                                          Heap Data structure 

class MinHeap {
private:
    vector<int> heap;

    void bubbleUp(int index) {
        while (index > 0) {
            int parentIndex = (index - 1) / 2;
            if (heap[index] >= heap[parentIndex]) {
                break;
            }
         swap(heap[index], heap[parentIndex]);
            index = parentIndex;
        }
    }

public:
    void insert(int value) {
        heap.push_back(value);
        bubbleUp(heap.size() - 1);
    }

    void printHeap() {
        for (int val : heap) {
           cout << val << " ";
        }
      cout << std::endl;
    }
};

int main() {
    MinHeap h;
    h.insert(10);
   h .insert(4);
    h.insert(15);
   h.insert(1);
    h.insert(7);
    
    h.printHeap(); 
    return 0;
}


#include <iostream>
using namespace std;

// Function to insert a new element into the Max Heap
void insertMaxHeap(int heap[], int& size, int value, int maxSize) {
    // Ensure there is space in the heap
    if (size >= maxSize) {
        cout << "Heap is full!" << endl;
        return;
    }
    
    // Insert the new value at the end of the heap
    heap[size] = value;
    
    // Get the index of the newly added element
    int idx = size;
    size++;  // Increase the size of the heap
    
    // Bubble-up to maintain the max-heap property
    while (idx > 0) {
        // Find the parent index
        int parent = (idx - 1) / 2;
        
        // If the newly added element is larger than its parent, swap them
        if (heap[idx] > heap[parent]) {
            swap(heap[idx], heap[parent]);
            // Move to the parent's index for the next comparison
            idx = parent;
        } else {
            // The heap property is maintained, stop the loop
            break;
        }
    }
}

// Function to display the elements of the heap
void displayHeap(const int heap[], int size) {
    for (int i = 0; i < size; ++i) {
        cout << heap[i] << " ";
    }
    cout << endl;
}

int main() {
    // Define the maximum size of the heap
    const int maxSize = 100;  // Example: maximum 100 elements in the heap
    int maxHeap[maxSize];
    
    // Size of the heap initially
    int size = 0;
    
    // Insert elements into the Max Heap
    insertMaxHeap(maxHeap, size, 10, maxSize);
    insertMaxHeap(maxHeap, size, 20, maxSize);
    insertMaxHeap(maxHeap, size, 15, maxSize);
    insertMaxHeap(maxHeap, size, 30, maxSize);
    insertMaxHeap(maxHeap, size, 25, maxSize);

    // Display the Max Heap
    cout << "Max Heap: ";
    displayHeap(maxHeap, size);

    return 0;
}














