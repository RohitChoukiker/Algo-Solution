#include <bits/stdc++.h>
using namespace std;

class Solution {
  private: 
    // DFS traversal function 
    void dfs(int node, vector<int> adjLs[], int vis[]) {
        // Mark the node as visited
        vis[node] = 1; 
        for(auto it: adjLs[node]) {
            if(!vis[it]) {
                dfs(it, adjLs, vis); 
            }
        }
    }
  public:
    int numProvinces(vector<vector<int>> adj, int V) {
        vector<int> adjLs[V]; 
        
        // Convert adjacency matrix to adjacency list 
        for(int i = 0; i < V; i++) {
            for(int j = 0; j < V; j++) {
                if(adj[i][j] == 1 && i != j) { // Ignore self-loops
                    adjLs[i].push_back(j); 
                    adjLs[j].push_back(i); 
                }
            }
        }

        int vis[V] = {0}; // Visited array
        int cnt = 0;      // Province count
        for(int i = 0; i < V; i++) {
            if(!vis[i]) { // New province found
                cnt++;
                dfs(i, adjLs, vis); // DFS to mark all nodes in this province
            }
        }
        return cnt;
    }
};

int main() {
    vector<vector<int>> adj {
        {1, 0, 1},
        {0, 1, 0},
        {1, 0, 1}
    };

    Solution ob;
    cout << ob.numProvinces(adj, 3) << endl; // Expected Output: 2
    
    return 0;
}
